{"version":3,"sources":["components/Header.js","components/Search.js","components/Results.js","App.js","index.js"],"names":["Container","styled","div","Header","h1","header","SearchContainer","SearchButton","button","Search","props","update","apiKey","searchBarRef","useRef","useEffect","current","focus","handleSearch","cityName","document","getElementById","value","fetch","mode","then","response","json","data","weatherObj","temp","main","unit","feelsLike","feels_like","description","weather","name","console","log","type","id","ref","onKeyDown","e","key","placeholder","onClick","Results","ResultsBox","isWeatherObjEmpty","City","h2","Unit","span","FeelsLikeSection","p","UnitSelection","results","changeUnit","Object","keys","length","constructor","checked","target","htmlFor","AppDiv","App","useState","setWeatherObj","unitSelected","setUnitSelected","API_KEY","handleUnitChange","unitCode","a","unitType","weatherData","newWeatherObj","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f9e6c2f7.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    background-color: #2c3142;\n    margin-top: 0;\n    text-align: center;\n`;\n\nconst Header = styled.h1`\n    color: #cccc00;\n    margin: 0;\n    padding-top: 1vh;\n    padding-bottom: 1vh;\n`\n\nconst header = () => {\n\n    return (\n        <Container>\n            <Header>Weather App</Header>\n        </Container>\n    );\n\n}\n\nexport default header;","import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst SearchContainer = styled.div`\n    background-color: #2c3142;\n    padding-bottom: 1vh;\n    text-align: center;\n`\nconst SearchButton = styled.button`\n    background-color: rgb(49, 49, 49);\n    color: #cccc00;\n    margin-left: 1vw;\n`;\nconst Search = (props) => {\n\n    const { update, apiKey } = props;\n\n    const searchBarRef = useRef(null);\n\n    useEffect(() => {\n        searchBarRef.current.focus();\n    });\n\n    const handleSearch = () => {\n        const cityName = document.getElementById('searchInput').value;\n\n        //Make API call via Promise (fetch call)\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=${apiKey}`, {mode: 'cors'})\n            .then((response) => {\n                return response.json();\n            }).then((data) => {\n                const weatherObj = {};\n                weatherObj.temp = data.main.temp;\n                weatherObj.unit = 'C';\n                weatherObj.feelsLike = data.main.feels_like;\n                weatherObj.description = data.weather[0].main;\n                weatherObj.cityName = data.name;\n                update(weatherObj);\n\n                console.log(data);\n                console.log(weatherObj);\n            });\n\n\n    }\n\n    const handleEnterKey = (e) => {\n        if (e.key === 'Enter') {\n          handleSearch();\n        }\n      }\n\n    return (\n        <SearchContainer>\n            <input type=\"text\" \n                   id=\"searchInput\" \n                   ref={searchBarRef}\n                   onKeyDown={handleEnterKey}\n                   placeholder=\"Enter City Here\" />\n            <SearchButton \n                id=\"searchButton\"\n                onClick={handleSearch}>\n                Search\n            </SearchButton>\n        </SearchContainer>\n    );\n}\n\nexport default Search;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Results = styled.div`\n    padding-top: 2vh;\n    background-color: #545b72;\n    flex-grow: 1;\n    text-align: center;\n`\n\nconst ResultsBox = styled.div`\n    display: ${props => props.isWeatherObjEmpty ? \"none\" : \"inline-block\"};\n    padding: 10px;\n    border: 5px solid #000080;\n    border-radius: 5px;\n    background-color: #ffcc00;\n`\n\nconst City = styled.h2`\n    margin-top: 0px;\n`\n\nconst Unit = styled.span`\n    display: ${props => props.isWeatherObjEmpty ? \"none\" : \"inline\"};\n`\n\nconst FeelsLikeSection = styled.p`\n    display: ${props => props.isWeatherObjEmpty ? \"none\" : \"block\"};\n`\n\nconst UnitSelection = styled.div`\n    display: ${props => props.isWeatherObjEmpty ? \"none\" : \"block\"};\n    margin-top: 2vh;\n`\n\nconst results = (props) => {\n\n    const { changeUnit, unit, weatherObj } = props;\n\n    //Check if weather object is empty and render conditionally based on that\n    const isWeatherObjEmpty = Object.keys(weatherObj).length === 0 && weatherObj.constructor === Object;\n\n    return (\n        <Results>\n            <ResultsBox isWeatherObjEmpty={isWeatherObjEmpty} >\n                <City>{weatherObj.cityName}</City>\n                <div>\n                    <span>{weatherObj.temp}</span> <Unit isWeatherObjEmpty={isWeatherObjEmpty}>{'\\u00B0'}{weatherObj.unit}</Unit>\n                </div>\n                <FeelsLikeSection isWeatherObjEmpty={isWeatherObjEmpty}>Feels like: <span>{weatherObj.feelsLike}</span></FeelsLikeSection>\n                <span>{weatherObj.description}</span>\n                <br />\n                <UnitSelection isWeatherObjEmpty={isWeatherObjEmpty}>\n                    <input type=\"radio\" \n                        id=\"celsius\" \n                        name=\"unit\" \n                        value=\"C\" \n                        checked={unit === 'C'}\n                        onClick={(e) => changeUnit(e.target.value)}/>\n                    <label htmlFor=\"celsius\">Celsius</label>\n                    <input type=\"radio\" \n                        id=\"fahrenheit\" \n                        name=\"unit\" \n                        value=\"F\"\n                        checked={unit === 'F'} \n                        onClick={(e) => changeUnit(e.target.value)}/>\n                    <label htmlFor=\"fahrenheit\">Fahrenheit</label>\n                </UnitSelection>\n            </ResultsBox>\n        </Results>\n    );\n}\n\nexport default results;","import React, { useState } from 'react';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Results from './components/Results';\nimport styled from 'styled-components';\n\nconst AppDiv = styled.div`\ndisplay: flex;\nflex-direction: column;\nheight: 100vh;\n`;\n\nconst App = () =>  {\n\n  const [weatherObj, setWeatherObj] = useState({});\n  const [unitSelected, setUnitSelected] = useState('C');\n  const API_KEY = 'a7be9f905cd3da9bb04819dd3df2b03e';\n\n  const handleUnitChange = async (unitCode) => {\n    // Don't do anything if weather object is empty\n    const isWeatherObjEmpty = Object.keys(weatherObj).length === 0 && weatherObj.constructor === Object;\n    if (!isWeatherObjEmpty) {\n      // Make API call via asynchronous function\n      const unitType = unitCode === 'F' ? 'imperial' : 'metric';\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${weatherObj.cityName}&units=${unitType}&appid=${API_KEY}`)\n      const weatherData = await response.json();\n      console.log(weatherData);\n      const newWeatherObj = {...weatherObj};\n      newWeatherObj.unit = unitCode;\n      newWeatherObj.temp = weatherData.main.temp;\n      newWeatherObj.feelsLike = weatherData.main.feels_like;\n      setWeatherObj(newWeatherObj);\n    }\n\n    if (unitCode === 'C') {\n      setUnitSelected('C');\n    } else {\n      setUnitSelected('F');\n    }\n  }\n\n  return (\n    <AppDiv>\n      <Header />\n      <Search update={setWeatherObj} apiKey={API_KEY}/>\n      <Results changeUnit={handleUnitChange} unit={unitSelected} weatherObj={weatherObj} />\n    </AppDiv>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}